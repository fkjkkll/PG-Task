#ifndef _RMW_ALG_AVERAGE_FILTER_H
#define _RMW_ALG_AVERAGE_FILTER_H

///////////////////////////////////////////////////////////////////////////////////////
//
//基于列和的快速均值滤波
//
///////////////////////////////////////////////////////////////////////////////////////
void RmwAvrFilterBySumCol( BYTE *pGryImg,  //原始灰度图像
	                       int width, int height,//图像的宽度和高度
	                       int M, int N, //滤波邻域：M列N行
	                       BYTE *pResImg //结果图像
                         );
///////////////////////////////////////////////////////////////////////////////////////
//
//基于列和的积分图实现
//
///////////////////////////////////////////////////////////////////////////////////////
void RmwDoSumGryImg( BYTE *pGryImg,  //原始灰度图像
	                 int width, //图像的宽度 
	                 int height,//图像的高度
	                 int *pSumImg //计算得到的积分图
                   );
///////////////////////////////////////////////////////////////////////////////////////
//
//基于SSE的积分图实现
//
///////////////////////////////////////////////////////////////////////////////////////
void RmwDoSumGryImg_SSE( BYTE *pGryImg,  //原始灰度图像
	                     int width, //图像的宽度,必须是4的倍数
	                     int height,//图像的高度
	                     int *pSumImg //计算得到的积分图
                       );
///////////////////////////////////////////////////////////////////////////////////////
//
//基于积分图的快速均值滤波
//
///////////////////////////////////////////////////////////////////////////////////////
void RmwAvrFilterBySumImg( int *pSumImg, //计算得到的积分图
	                       int width, int height,//图像的宽度和高度
	                       int M, int N, //滤波邻域：M列N行
	                       BYTE *pResImg //结果图像
                         );
#endif

